* General Functionality
** Startup
*** Start emacs server
#+BEGIN_SRC emacs-lisp
  (server-start)
#+END_SRC
*** dashboard package (better start screen)
#+BEGIN_SRC emacs-lisp
  (use-package dashboard
    :ensure t
    :config
    (dashboard-setup-startup-hook)
    (setq dashboard-items '((recents . 10)))
    (setq dashboard-banner-logo-title "Welcome to GNU Emacs")
    (setq dashboard-set-footer nil))
#+END_SRC
*** Show dashboard at startup
#+BEGIN_SRC emacs-lisp
  (setq initial-buffer-choice
	(lambda () (get-buffer "*dashboard*")))
#+END_SRC
** Annoyances
*** Remove default start screen
#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-message t)
#+END_SRC
*** Don't make extra files on the filesystem
#+BEGIN_SRC emacs-lisp
  (setq make-backup-file nil)
  (setq auto-save-default nil)
#+END_SRC
*** Make scrolling a little less crazy
#+BEGIN_SRC emacs-lisp
  (setq scroll-conservatively 100)
#+END_SRC
*** Replace "yes or no" prompts with "y or n"
#+BEGIN_SRC emacs-lisp
  (defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC
*** If on a system with a bell, shut it up
#+BEGIN_SRC emacs-lisp
  (setq ring-bell-function 'ignore)
#+END_SRC
*** Move between SubWords as well as between words
#+BEGIN_SRC emacs-lisp
  (global-subword-mode 1)
#+END_SRC
** Menus/Commands
*** Enable ido-mode
#+BEGIN_SRC emacs-lisp
  (setq ido-mode-flex-matching nil)
  (setq ido-create-new-buffer 'always)
  (setq ido-everywhere t)
  (ido-mode 1)
#+END_SRC
*** ido-vertical-mode package (make ido-mode less ugly)
#+BEGIN_SRC emacs-lisp
  (use-package ido-vertical-mode
    :ensure t
    :init (ido-vertical-mode 1))
  (setq ido-vertical-define-keys 'C-n-and-C-p-only)
#+END_SRC
*** smex package (M-x but ido style)
#+BEGIN_SRC emacs-lisp
  (use-package smex
    :ensure t
    :bind ("M-x" . smex))
#+END_SRC
*** which-key package (small menus to help with commands)
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :ensure t
    :init (which-key-mode 1))
#+END_SRC
*** swiper package (better searches)
#+BEGIN_SRC emacs-lisp
  (use-package swiper
    :ensure t
    :bind ("C-s" . swiper))
#+END_SRC
*** Sloppy focus
#+BEGIN_SRC emacs-lisp
  (setq focus-follows-mouse t)
  (setq mouse-autoselect-window t)
#+END_SRC
** Convenience
*** avy package (faster moving around documents)
#+BEGIN_SRC emacs-lisp
  (use-package avy
    :ensure t
    :bind ("M-s" . avy-goto-char))
#+END_SRC
*** hungry-delete package (convenient deletion of trailing whitespace)
#+BEGIN_SRC emacs-lisp
  (use-package hungry-delete
    :ensure t
    :config (global-hungry-delete-mode))
#+END_SRC
*** company package (autocompletion backend)
#+BEGIN_SRC emacs-lisp
  (use-package company
    :ensure t
    :init
    (add-hook 'after-init-hook 'global-company-mode))
#+END_SRC
*** popup-kill-ring package (easier time managing the kill ring)
#+BEGIN_SRC emacs-lisp
  (use-package popup-kill-ring
    :ensure t
    :bind ("M-y" . popup-kill-ring))
#+END_SRC
*** Kill an entire word when you're in the middle of it
#+BEGIN_SRC emacs-lisp
  (defun whole-kill-word ()
    (interactive)
    (backward-word)
    (kill-word 1))
  (global-set-key (kbd "C-c DEL") 'whole-kill-word)
#+END_SRC
*** Electric mode (OH MY GOD THIS IS SO GREAT)
#+BEGIN_SRC emacs-lisp
  (setq electric-pair-pairs '(
			      (?\{ . ?\})
			      (?\( . ?\))
			      (?\[ . ?\])
			      (?\" . ?\")))
  (electric-pair-mode t)
#+END_SRC
** Org-mode
*** Shortcuts for various code snippets in org-mode
#+BEGIN_SRC emacs-lisp
  (add-to-list 'org-structure-template-alist
	       '("el" "#+BEGIN_SRC emacs-lisp\n?\n#+END_SRC"))
#+END_SRC
*** Use the current window when editing source code in org-mode
#+BEGIN_SRC emacs-lisp
  (setq org-src-window-setup 'current-window)
#+END_SRC
** Buffers
*** Kill current buffer with C-x k, use C-x C-k to kill both the buffer and window
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x k") 'kill-this-buffer)
  (global-set-key (kbd "C-x C-k") 'kill-buffer-and-window)
#+END_SRC
*** Kill current buffer and window
*** Use ibuffer so the buffer list doesn't open a new window
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x b") 'ibuffer)
#+END_SRC
*** Use buffer switching on C-x C-b
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x C-b") 'ido-switch-buffer)
#+END_SRC
** Windows
*** Move focus when explicitly creating new windows
#+BEGIN_SRC emacs-lisp
  (defun split-and-follow-vertical ()
    (interactive)
    (split-window-below)
    (balance-windows)
    (other-window 1))
  (global-set-key (kbd "C-x 2") 'split-and-follow-vertical)

  (defun split-and-follow-horizontal ()
    (interactive)
    (split-window-right)
    (balance-windows)
    (other-window 1))
  (global-set-key (kbd "C-x 3") 'split-and-follow-horizontal)
#+END_SRC
*** Balance windows with C-c b
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-c b") 'balance-windows)
#+END_SRC
*** switch-window package (easier movement between windows)
#+BEGIN_SRC emacs-lisp
  (use-package switch-window
    :ensure t
    :config
    (setq switch-window-input-style 'minibuffer)
    (setq switch-window-increase 4)
    (setq switch-window-threshold 2)
    (setq switch-window-shortcut-style 'qwerty)
    (setq switch-window-qwerty-shortcuts
	  '("a" "s" "d" "f" "g" "z" "x" "c" "v" "b"))
    :bind
    ([remap other-window] . switch-window))
#+END_SRC
** Terminal
*** Always use zsh
#+BEGIN_SRC emacs-lisp
  (defvar my-term-shell "/bin/zsh")
  (defadvice ansi-term (before force-bash)
    (interactive (list my-term-shell)))
  (ad-activate 'ansi-term)
#+END_SRC
*** Bind C-c t to terminal
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-c t") 'ansi-term)
#+END_SRC
** Configuration
*** Open configuration with C-c e
#+BEGIN_SRC emacs-lisp
  (defun config-visit ()
    (interactive)
    (find-file "~/.emacs.d/config.org"))
  (global-set-key (kbd "C-c e") 'config-visit)
#+END_SRC
*** Reload configuration with C-c r
#+BEGIN_SRC emacs-lisp
  (defun config-reload ()
    (interactive)
    (org-babel-load-file
     (expand-file-name "~/.emacs.d/config.org")))
  (global-set-key (kbd "C-c r") 'config-reload)
#+END_SRC
* Extra dependency functions
** buffer-line-count
#+BEGIN_SRC emacs-lisp
  (defun buffer-line-count ()
    "Return the number of lines in this buffer."
    (count-lines (point-min) (point-max)))
#+END_SRC
** goto-random-line
#+BEGIN_SRC emacs-lisp
  (defun goto-random-line ()
    (interactive)
    (goto-line (1+ (random (buffer-line-count)))))
#+END_SRC
* EXWM (Emacs X Window Manager)
** Initialization
*** exwm package (base window manager)
#+BEGIN_SRC emacs-lisp
  (use-package exwm
    :ensure t
    :config
    (require 'exwm)
    (require 'exwm-randr)
    (require 'exwm-config)
    (require 'exwm-systemtray))
#+END_SRC
*** Configure multi-head
#+BEGIN_SRC emacs-lisp
  (setq exwm-randr-workspace-output-plist '(0 "LVDS1"
					    0 "eDP-1-1"
					    0 "DP-1-2-2"
					    1 "DP-1-2-1"
					    2 "DP-1-2-3"
					    3 "DP-1-2-2"
					    4 "DP-1-2-1"
					    5 "DP-1-2-3"
					    6 "DP-1-2-2"
					    7 "DP-1-2-1"
					    8 "DP-1-2-3"
					    9 "DP-1-2-2"))
  (setq exwm-workspace-number 4)
  (add-hook 'exwm-randr-screen-change-hook
	    (lambda ()
	      (start-process-shell-command
	       "xrandr" nil "ds")))
  (exwm-randr-enable)
#+END_SRC
*** Initialize EXWM
#+BEGIN_SRC emacs-lisp
    (exwm-enable)
    (exwm-systemtray-enable)
#+END_SRC
** Keybindings
*** Global commands
#+BEGIN_SRC emacs-lisp
  (setq exwm-input-global-keys
	`(;; Workspace binds
	  ([?\s-q] . exwm-workspace-delete)
	  ([?\s-w] . exwm-workspace-switch)
	  ([?\s-e] . exwm-workspace-swap)
	  ([?\s-r] . exwm-reset)
	  ,@(mapcar (lambda (i)
		      `(,(kbd (format "s-%d" i)) .
			(lambda ()
			  (interactive)
			  (exwm-workspace-switch-create ,i))))
		    (number-sequence 0 9))

	  ;; Binds to run programs
	  ([?\s-t] . (lambda ()
		       (interactive)
		       (start-process-shell-command
			"Telegram" nil "telegram")))
	  ([?\s-s] . (lambda ()
		       (interactive)
		       (start-process-shell-command
			"Steam" nil "steam")))
	  ([?\s-d] . (lambda ()
			(interactive)
			(start-process-shell-command
			 "Discord" nil "discord")))
	  ([?\s-f] . (lambda ()
		       (interactive)
		       (start-process-shell-command
			"Firefox" nil "firefox")))
	  ([?\s-g] . (lambda ()
		       (interactive)
		       (start-process-shell-command
			"GIMP" nil "gimp")))
	  ([?\s-b] . (lambda ()
		       (interactive)
		       (start-process-shell-command
			"LibreOffice" nil "libreoffice")))

	  ;; Lockscreen
	  ([?\s-l] . (lambda ()
		       (interactive)
		       (start-process-shell-command
			"Lockscreen" nil "i3l")))
	
	  ;; Keyboard layout cycling
	  ([?\s- ] . (lambda ()
		       (interactive)
		       (shell-command "keyctl -c us epo de")))))
#+END_SRC
*** EXWM-mode functions
**** Send a key verbatim to the program more easily
#+BEGIN_SRC emacs-lisp
  (define-key exwm-mode-map (kbd "C-c C-q") nil)
  (define-key exwm-mode-map (kbd "C-q") 'exwm-input-send-next-key)
#+END_SRC
**** Inhibit toggling fullscreen
#+BEGIN_SRC emacs-lisp
  (define-key exwm-mode-map (kbd "C-c C-f") nil)
#+END_SRC
**** Toggle floating, inhibit hiding
#+BEGIN_SRC emacs-lisp
  (define-key exwm-mode-map (kbd "C-c C-t C-f") 'exwm-floating-toggle-floating)
  (define-key exwm-mode-map (kbd "C-c C-t C-v") nil)
#+END_SRC
**** Disable toggling the mode line
#+BEGIN_SRC emacs-lisp
  (define-key exwm-mode-map (kbd "C-c C-t C-m") nil)
#+END_SRC
*** Pass these to programs for emacs style navigation
#+BEGIN_SRC emacs-lisp
    (setq exwm-input-simulation-keys
	  '(([?\C-b] . [left])
	    ([?\C-f] . [right])
	    ([?\C-p] . [up])
	    ([?\C-n] . [down])
	    ([?\C-a] . [home])
	    ([?\C-e] . [end])
	    ([?\C-v] . [next])
	    ([?\M-v] . [prior])
	    ([?\C-d] . [delete])
	    ([?\C-k] . [S-end delete])
	    ([?\C-w] . [?\C-x])
	    ([?\M-w] . [?\C-c])
	    ([?\C-y] . [?\C-v])
	    ([?\C-s] . [?\C-f])))
#+END_SRC
*** XF86 Keys (cannot be bound through the above methods)
**** Volume control
#+BEGIN_SRC emacs-lisp
  (defun volctl-m ()
    (interactive)
    (shell-command "volctl m"))
  (global-set-key (kbd "<XF86AudioMute>") 'volctl-m)
  (define-key exwm-mode-map (kbd "<XF86AudioMute>") 'volctl-m)

  (defun volctl-t ()
    (interactive)
    (shell-command "volctl t"))
  (global-set-key (kbd "<XF86AudioMicMute>") 'volctl-t)
  (define-key exwm-mode-map (kbd "<XF86AudioMicMute>") 'volctl-t)

  (defun volctl-u ()
    (interactive)
    (shell-command "volctl u"))
  (global-set-key (kbd "<XF86AudioRaiseVolume>") 'volctl-u)
  (define-key exwm-mode-map (kbd "<XF86AudioRaiseVolume>") 'volctl-u)

  (defun volctl-d ()
    (interactive)
    (shell-command "volctl d"))
  (global-set-key (kbd "<XF86AudioLowerVolume>") 'volctl-d)
  (define-key exwm-mode-map (kbd "<XF86AudioLowerVolume>") 'volctl-d)
#+END_SRC
**** Brightness control
#+BEGIN_SRC emacs-lisp
  (defun blctl-up ()
    (interactive)
    (shell-command "blctl -u"))
  (global-set-key (kbd "<XF86MonBrightnessUp>") 'blctl-up)
  (define-key exwm-mode-map (kbd "<XF86MonBrightnessUp>") 'blctl-up)

  (defun blctl-down ()
    (interactive)
    (shell-command "blctl -d"))
  (global-set-key (kbd "<XF86MonBrightnessDown>") 'blctl-down)
  (define-key exwm-mode-map (kbd "<XF86MonBrightnessDown>") 'blctl-down)
#+END_SRC
**** Taking screenshots
#+BEGIN_SRC emacs-lisp
  (defun screencap-section ()
    (interactive)
    (shell-command
     "maim -s /dev/stdout | xclip -selection clipboard -t image/png &> /dev/null"))
  (global-set-key (kbd "<print>") 'screencap-section)
  (define-key exwm-mode-map (kbd "<print>") 'screencap-section)

  (defun screencap-full ()
    (interactive)
    (shell-command
     "maim /dev/stdout | xclip -selection clipboard -t image/png &> /dev/null"))
  (global-set-key (kbd "<C-print>") 'screencap-full)
  (define-key exwm-mode-map (kbd "<C-print>") 'screencap-full)
#+END_SRC
**** Lockscreen
#+BEGIN_SRC emacs-lisp
  (defun lock-screen ()
    (interactive)
    (shell-command "i3l"))
  (global-set-key (kbd "<XF86ScreenSaver>") 'lock-screen)
  (define-key exwm-mode-map (kbd "<XF86ScreenSaver>") 'lock-screen)
#+END_SRC
** Name EXWM buffers after the window class and title
#+BEGIN_SRC emacs-lisp
  (defun exwm-rename-buffer ()
    (interactive)
    (exwm-workspace-rename-buffer
     (concat exwm-title)))
  (add-hook 'exwm-update-title-hook 'exwm-rename-buffer)
#+END_SRC
** dmenu package (for launching things I haven't bound)
#+BEGIN_SRC emacs-lisp
  (use-package dmenu
    :ensure t
    :bind ("s-x" . dmenu))
#+END_SRC
** Startup applications
*** Set fallback cursor
#+BEGIN_SRC emacs-lisp
  (shell-command "xsetroot -cursor_name left_ptr")
#+END_SRC
*** Set keyboard layout to US
#+BEGIN_SRC emacs-lisp
  (shell-command "keybd -s us")
#+END_SRC
*** Compositor
#+BEGIN_SRC emacs-lisp
  (start-process-shell-command "xcompmgr" nil "xcompmgr")
#+END_SRC
*** Notification manager
#+BEGIN_SRC emacs-lisp
  (start-process-shell-command "dunst" nil "dunst")
#+END_SRC
* EMMS (Emacs MultiMedia System)
** Install EMMS and bind playback keys
#+BEGIN_SRC emacs-lisp
  (use-package emms
    :ensure t
    :config
    (require 'emms-setup)
    (require 'emms-player-mpd)
    (emms-all)
    (setq emms-seek-seconds 5)
    (setq emms-player-list '(emms-player-mpd))
    (setq emms-info-functions '(emms-info mpd))
    (setq emms-player-mpd-server-name "localhost")
    (setq emms-player-mpd-server-port "6601")
    (setq mpc-host "localhost:6601")
    :bind (("s-a v" . emms)
	   ("s-a b" . emms-smart-browse)
	   ("s-a r c" . emms-player-mpd-update-all-reset-cache)
	   ("<XF86AudioPrev>" . emms-previous)
	   ("<XF86AudioNext>" . emms-next)
	   ("<XF86AudioPlay>" . emms-pause)
	   ("<XF86AudioStop>" . emms-stop)
	   ("<s-left>" . emms-previous)
	   ("<s-right>" . emms-next)
	   ("<s-down>" . emms-pause)
	   ("<s-up>" . emms-stop)
	   :map exwm-mode-map
	   ("s-a v" . emms)
	   ("s-a b" . emms-smart-browse)
	   ("s-a r c" . emms-player-mpd-update-all-reset-cache)
	   ("<XF86AudioPrev>" . emms-previous)
	   ("<XF86AudioNext>" . emms-next)
	   ("<XF86AudioPlay>" . emms-pause)
	   ("<XF86AudioStop>" . emms-stop)
	   ("<s-left>" . emms-previous)
	   ("<s-right>" . emms-next)
	   ("<s-down>" . emms-pause)
	   ("<s-up>" . emms-stop)))
#+END_SRC
** Other useful bindings
*** Start the daemon
#+BEGIN_SRC emacs-lisp
  (defun mpd/start-music-daemon ()
    "Start MPD, connect to it and syncs the metadata cache"
    (interactive)
    (shell-command "mpd")
    (mpd/update-database)
    (emms-player-mpd-connect)
    (emms-cache-set-from-mpd-all)
    (message "MPD started!"))
  (global-set-key (kbd "s-a x") 'mpd/start-music-daemon)
  (define-key exwm-mode-map (kbd "s-a x") 'mpd/start-music/daemon)
#+END_SRC
*** Stop the daemon
#+BEGIN_SRC emacs-lisp
  (defun mpd/kill-music-daemon ()
    "Stops playback and kills the music daemon."
    (interactive)
    (emms-stop)
    (call-process "killall" nil nil nil "mpd")
    (message "MPD killed!"))
  (global-set-key (kbd "s-a q") 'mpd/kill-music-daemon)
  (define-key exwm-mode-map (kbd "s-a q") 'mpd/kill-music-daemon)
#+END_SRC
*** Update the database
#+BEGIN_SRC emacs-lisp
  (defun mpd/update-database ()
    "Update the MPD database synchronously."
    (interactive)
    (call-process "mpc" nil nil nil "update")
    (message "MPD database updated!"))
  (global-set-key (kbd "s-a r d") 'mpd/update-database)
  (define-key exwm-mode-map (kbd "s-a r d") 'mpd/update-database)
#+END_SRC
*** Playback status (current track)
#+BEGIN_SRC emacs-lisp
  (defun emms-status ()
    (interactive)
    (shell-command "mpc"))
  (global-set-key (kbd "s-a a") 'emms-status)
  (define-key exwm-mode-map (kbd "s-a a") 'exwm-status)
#+END_SRC
*** Playback styles (repeat track/playlist, shuffle)
#+BEGIN_SRC emacs-lisp
  (defun emms-shuffle-message ()
    (interactive)
    (emms-shuffle)
    (message "Playlist has been shuffled."))

  (global-set-key (kbd "s-a s") 'emms-shuffle-message)
  (global-set-key (kbd "s-a r a") 'emms-toggle-repeat-playlist)
  (global-set-key (kbd "s-a r t") 'emms-toggle-repeat-track)

  (define-key exwm-mode-map (kbd "s-a s") 'emms-shuffle-message)
  (define-key exwm-mode-map (kbd "s-a r a") 'emms-toggle-repeat-playlist)
  (define-key exwm-mode-map (kbd "s-a r t") 'emms-toggle-repeat-track)
#+END_SRC
* Schwayyyyy Looks
** Hide menu bar, tooltips, tool bar, and scroll bar
#+BEGIN_SRC emacs-lisp
  (menu-bar-mode -1)
  (tooltip-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
#+END_SRC
** Add window dividers
#+BEGIN_SRC emacs-lisp
  (window-divider-mode 1)
#+END_SRC
** Line/column numbers
*** Show line and column numbers in the status line
#+BEGIN_SRC emacs-lisp
  (line-number-mode 1)
  (column-number-mode 1)
#+END_SRC
*** Show line numbers in all modes unless I specify otherwise
#+BEGIN_SRC emacs-lisp
  (global-display-line-numbers-mode 1)
  (add-hook 'term-mode-hook
	    (lambda () (display-line-numbers-mode -1)))
  (add-hook 'ibuffer-hook
	    (lambda () (display-line-numbers-mode -1)))
  (add-hook 'dashboard-mode-hook
	    (lambda () (display-line-numbers-mode -1)))
#+END_SRC
** Prettify symbols/text
*** Convert various text to symbols in programming modes
#+BEGIN_SRC emacs-lisp
  (global-prettify-symbols-mode 1)
#+END_SRC
*** rainbow package (show colors when typed as hex codes)
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-mode
    :ensure t
    :config
    (define-globalized-minor-mode global-rainbow-mode
      rainbow-mode
      (lambda () (rainbow-mode 1)))
    (global-rainbow-mode 1))
#+END_SRC
*** rainbow-delimiters package (better quotes/parentheses/brackets)
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-delimiters
    :ensure t
    :init
    (add-hook 'prog-mode-hook #'rainbow-delimiters-mode 1))
#+END_SRC
** Mode Line
*** Show clock on mode line
#+BEGIN_SRC emacs-lisp
  (setq display-time-24hr-format t)
  (display-time-mode 1)
#+END_SRC
*** Show battery state on mode line
#+BEGIN_SRC emacs-lisp
  (display-battery-mode 1)
#+END_SRC
*** diminish package (hide minor modes from mode line)
#+BEGIN_SRC emacs-lisp
    (use-package diminish
      :ensure t
      :init
      (diminish 'hungry-delete-mode)
      (diminish 'which-key-mode)
      (diminish 'subword-mode)
      (diminish 'company-mode)
      (diminish 'rainbow-mode)
      (diminish 'eldoc-mode))
#+END_SRC
*** spaceline package (spacemacs mode line)
#+BEGIN_SRC emacs-lisp
  (use-package spaceline
    :ensure t
    :config
    (require 'spaceline-config)
    (setq powerline-default-separator (quote arrow))
    (spaceline-spacemacs-theme))
#+END_SRC
